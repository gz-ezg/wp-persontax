'use strict';

var _component = require('./../common/component.js');

var _touch = require('./../mixins/touch.js');

(0, _component.VantComponent)({
  mixins: [_touch.touch],
  props: {
    disabled: Boolean,
    max: {
      type: Number,
      value: 100
    },
    min: {
      type: Number,
      value: 0
    },
    step: {
      type: Number,
      value: 1
    },
    value: {
      type: Number,
      value: 0
    },
    barHeight: {
      type: String,
      value: '2px'
    }
  },
  created: function created() {
    this.updateValue(this.data.value);
  },
  methods: {
    onTouchStart: function onTouchStart(event) {
      if (this.data.disabled) return;
      this.touchStart(event);
      this.startValue = this.format(this.data.value);
    },
    onTouchMove: function onTouchMove(event) {
      var _this = this;

      if (this.data.disabled) return;
      this.touchMove(event);
      this.getRect('.van-slider').then(function (rect) {
        var diff = _this.deltaX / rect.width * 100;

        _this.updateValue(_this.startValue + diff);
      });
    },
    onTouchEnd: function onTouchEnd() {
      if (this.data.disabled) return;
      this.updateValue(this.data.value, true);
    },
    onClick: function onClick(event) {
      var _this2 = this;

      if (this.data.disabled) return;
      this.getRect(function (rect) {
        var value = (event.detail.x - rect.left) / rect.width * 100;

        _this2.updateValue(value, true);
      });
    },
    updateValue: function updateValue(value, end) {
      value = this.format(value);
      this.setData({
        value: value,
        barStyle: "width: " + value + "%; height: " + this.data.barHeight + ";"
      });

      if (end) {
        this.$emit('change', value);
      }
    },
    format: function format(value) {
      var _this$data = this.data,
          max = _this$data.max,
          min = _this$data.min,
          step = _this$data.step;
      return Math.round(Math.max(min, Math.min(value, max)) / step) * step;
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1peGlucyIsInRvdWNoIiwicHJvcHMiLCJkaXNhYmxlZCIsIkJvb2xlYW4iLCJtYXgiLCJ0eXBlIiwiTnVtYmVyIiwidmFsdWUiLCJtaW4iLCJzdGVwIiwiYmFySGVpZ2h0IiwiU3RyaW5nIiwiY3JlYXRlZCIsInVwZGF0ZVZhbHVlIiwiZGF0YSIsIm1ldGhvZHMiLCJvblRvdWNoU3RhcnQiLCJldmVudCIsInRvdWNoU3RhcnQiLCJzdGFydFZhbHVlIiwiZm9ybWF0Iiwib25Ub3VjaE1vdmUiLCJfdGhpcyIsInRvdWNoTW92ZSIsImdldFJlY3QiLCJ0aGVuIiwicmVjdCIsImRpZmYiLCJkZWx0YVgiLCJ3aWR0aCIsIm9uVG91Y2hFbmQiLCJvbkNsaWNrIiwiX3RoaXMyIiwiZGV0YWlsIiwieCIsImxlZnQiLCJlbmQiLCJzZXREYXRhIiwiYmFyU3R5bGUiLCIkZW1pdCIsIl90aGlzJGRhdGEiLCJNYXRoIiwicm91bmQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0EsOEJBQWM7QUFDWkEsVUFBUSxDQUFDQyxZQUFELENBREk7QUFFWkMsU0FBTztBQUNMQyxjQUFVQyxPQURMO0FBRUxDLFNBQUs7QUFDSEMsWUFBTUMsTUFESDtBQUVIQyxhQUFPO0FBRkosS0FGQTtBQU1MQyxTQUFLO0FBQ0hILFlBQU1DLE1BREg7QUFFSEMsYUFBTztBQUZKLEtBTkE7QUFVTEUsVUFBTTtBQUNKSixZQUFNQyxNQURGO0FBRUpDLGFBQU87QUFGSCxLQVZEO0FBY0xBLFdBQU87QUFDTEYsWUFBTUMsTUFERDtBQUVMQyxhQUFPO0FBRkYsS0FkRjtBQWtCTEcsZUFBVztBQUNUTCxZQUFNTSxNQURHO0FBRVRKLGFBQU87QUFGRTtBQWxCTixHQUZLO0FBeUJaSyxXQUFTLFNBQVNBLE9BQVQsR0FBbUI7QUFDMUIsU0FBS0MsV0FBTCxDQUFpQixLQUFLQyxJQUFMLENBQVVQLEtBQTNCO0FBQ0QsR0EzQlc7QUE0QlpRLFdBQVM7QUFDUEMsa0JBQWMsU0FBU0EsWUFBVCxDQUFzQkMsS0FBdEIsRUFBNkI7QUFDekMsVUFBSSxLQUFLSCxJQUFMLENBQVVaLFFBQWQsRUFBd0I7QUFDeEIsV0FBS2dCLFVBQUwsQ0FBZ0JELEtBQWhCO0FBQ0EsV0FBS0UsVUFBTCxHQUFrQixLQUFLQyxNQUFMLENBQVksS0FBS04sSUFBTCxDQUFVUCxLQUF0QixDQUFsQjtBQUNELEtBTE07QUFNUGMsaUJBQWEsU0FBU0EsV0FBVCxDQUFxQkosS0FBckIsRUFBNEI7QUFDdkMsVUFBSUssUUFBUSxJQUFaOztBQUVBLFVBQUksS0FBS1IsSUFBTCxDQUFVWixRQUFkLEVBQXdCO0FBQ3hCLFdBQUtxQixTQUFMLENBQWVOLEtBQWY7QUFDQSxXQUFLTyxPQUFMLENBQWEsYUFBYixFQUE0QkMsSUFBNUIsQ0FBaUMsVUFBVUMsSUFBVixFQUFnQjtBQUMvQyxZQUFJQyxPQUFPTCxNQUFNTSxNQUFOLEdBQWVGLEtBQUtHLEtBQXBCLEdBQTRCLEdBQXZDOztBQUVBUCxjQUFNVCxXQUFOLENBQWtCUyxNQUFNSCxVQUFOLEdBQW1CUSxJQUFyQztBQUNELE9BSkQ7QUFLRCxLQWhCTTtBQWlCUEcsZ0JBQVksU0FBU0EsVUFBVCxHQUFzQjtBQUNoQyxVQUFJLEtBQUtoQixJQUFMLENBQVVaLFFBQWQsRUFBd0I7QUFDeEIsV0FBS1csV0FBTCxDQUFpQixLQUFLQyxJQUFMLENBQVVQLEtBQTNCLEVBQWtDLElBQWxDO0FBQ0QsS0FwQk07QUFxQlB3QixhQUFTLFNBQVNBLE9BQVQsQ0FBaUJkLEtBQWpCLEVBQXdCO0FBQy9CLFVBQUllLFNBQVMsSUFBYjs7QUFFQSxVQUFJLEtBQUtsQixJQUFMLENBQVVaLFFBQWQsRUFBd0I7QUFDeEIsV0FBS3NCLE9BQUwsQ0FBYSxVQUFVRSxJQUFWLEVBQWdCO0FBQzNCLFlBQUluQixRQUFRLENBQUNVLE1BQU1nQixNQUFOLENBQWFDLENBQWIsR0FBaUJSLEtBQUtTLElBQXZCLElBQStCVCxLQUFLRyxLQUFwQyxHQUE0QyxHQUF4RDs7QUFFQUcsZUFBT25CLFdBQVAsQ0FBbUJOLEtBQW5CLEVBQTBCLElBQTFCO0FBQ0QsT0FKRDtBQUtELEtBOUJNO0FBK0JQTSxpQkFBYSxTQUFTQSxXQUFULENBQXFCTixLQUFyQixFQUE0QjZCLEdBQTVCLEVBQWlDO0FBQzVDN0IsY0FBUSxLQUFLYSxNQUFMLENBQVliLEtBQVosQ0FBUjtBQUNBLFdBQUs4QixPQUFMLENBQWE7QUFDWDlCLGVBQU9BLEtBREk7QUFFWCtCLGtCQUFVLFlBQVkvQixLQUFaLEdBQW9CLGFBQXBCLEdBQW9DLEtBQUtPLElBQUwsQ0FBVUosU0FBOUMsR0FBMEQ7QUFGekQsT0FBYjs7QUFLQSxVQUFJMEIsR0FBSixFQUFTO0FBQ1AsYUFBS0csS0FBTCxDQUFXLFFBQVgsRUFBcUJoQyxLQUFyQjtBQUNEO0FBQ0YsS0F6Q007QUEwQ1BhLFlBQVEsU0FBU0EsTUFBVCxDQUFnQmIsS0FBaEIsRUFBdUI7QUFDN0IsVUFBSWlDLGFBQWEsS0FBSzFCLElBQXRCO0FBQUEsVUFDSVYsTUFBTW9DLFdBQVdwQyxHQURyQjtBQUFBLFVBRUlJLE1BQU1nQyxXQUFXaEMsR0FGckI7QUFBQSxVQUdJQyxPQUFPK0IsV0FBVy9CLElBSHRCO0FBSUEsYUFBT2dDLEtBQUtDLEtBQUwsQ0FBV0QsS0FBS3JDLEdBQUwsQ0FBU0ksR0FBVCxFQUFjaUMsS0FBS2pDLEdBQUwsQ0FBU0QsS0FBVCxFQUFnQkgsR0FBaEIsQ0FBZCxJQUFzQ0ssSUFBakQsSUFBeURBLElBQWhFO0FBQ0Q7QUFoRE07QUE1QkcsQ0FBZCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vY29tcG9uZW50JztcbmltcG9ydCB7IHRvdWNoIH0gZnJvbSAnLi4vbWl4aW5zL3RvdWNoJztcblZhbnRDb21wb25lbnQoe1xuICBtaXhpbnM6IFt0b3VjaF0sXG4gIHByb3BzOiB7XG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgbWF4OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICB2YWx1ZTogMTAwXG4gICAgfSxcbiAgICBtaW46IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHZhbHVlOiAwXG4gICAgfSxcbiAgICBzdGVwOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICB2YWx1ZTogMVxuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHZhbHVlOiAwXG4gICAgfSxcbiAgICBiYXJIZWlnaHQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHZhbHVlOiAnMnB4J1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICB0aGlzLnVwZGF0ZVZhbHVlKHRoaXMuZGF0YS52YWx1ZSk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgdGhpcy50b3VjaFN0YXJ0KGV2ZW50KTtcbiAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHRoaXMuZm9ybWF0KHRoaXMuZGF0YS52YWx1ZSk7XG4gICAgfSxcbiAgICBvblRvdWNoTW92ZTogZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuZGlzYWJsZWQpIHJldHVybjtcbiAgICAgIHRoaXMudG91Y2hNb3ZlKGV2ZW50KTtcbiAgICAgIHRoaXMuZ2V0UmVjdCgnLnZhbi1zbGlkZXInKS50aGVuKGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgIHZhciBkaWZmID0gX3RoaXMuZGVsdGFYIC8gcmVjdC53aWR0aCAqIDEwMDtcblxuICAgICAgICBfdGhpcy51cGRhdGVWYWx1ZShfdGhpcy5zdGFydFZhbHVlICsgZGlmZik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLmRpc2FibGVkKSByZXR1cm47XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlKHRoaXMuZGF0YS52YWx1ZSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuZGF0YS5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgdGhpcy5nZXRSZWN0KGZ1bmN0aW9uIChyZWN0KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IChldmVudC5kZXRhaWwueCAtIHJlY3QubGVmdCkgLyByZWN0LndpZHRoICogMTAwO1xuXG4gICAgICAgIF90aGlzMi51cGRhdGVWYWx1ZSh2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZVZhbHVlOiBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh2YWx1ZSwgZW5kKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuZm9ybWF0KHZhbHVlKTtcbiAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgYmFyU3R5bGU6IFwid2lkdGg6IFwiICsgdmFsdWUgKyBcIiU7IGhlaWdodDogXCIgKyB0aGlzLmRhdGEuYmFySGVpZ2h0ICsgXCI7XCJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgX3RoaXMkZGF0YSA9IHRoaXMuZGF0YSxcbiAgICAgICAgICBtYXggPSBfdGhpcyRkYXRhLm1heCxcbiAgICAgICAgICBtaW4gPSBfdGhpcyRkYXRhLm1pbixcbiAgICAgICAgICBzdGVwID0gX3RoaXMkZGF0YS5zdGVwO1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5tYXgobWluLCBNYXRoLm1pbih2YWx1ZSwgbWF4KSkgLyBzdGVwKSAqIHN0ZXA7XG4gICAgfVxuICB9XG59KTsiXX0=